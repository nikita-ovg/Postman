{
	"info": {
		"_postman_id": "fc1df681-6a89-4045-aed3-e6539ebdadd6",
		"name": "HM_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19350910"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var lolip = JSON.parse(responseBody);\r",
							"// Проверить, что name в ответе равно name in request (name вбить руками.)\r",
							"pm.test(\"Check name in response = name in request\", function () {\r",
							"    var lolip = JSON.parse(responseBody);\r",
							"    pm.expect(lolip.name).to.eql(\"nikita\");\r",
							"});\r",
							"// Проверить, что age в ответе равно age in request (age вбить руками.)\r",
							"pm.test(\"Check age in response = age in request\", function () {\r",
							"    var repop = pm.response.json();\r",
							"    pm.expect(repop.age).to.eql(\"26\");\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary in request (salary вбить руками.)\r",
							"pm.test(\"Check salary in response = salary in request\", function () {\r",
							"    var bulka = pm.response.json();\r",
							"    pm.expect(bulka.salary).to.eql(4000);\r",
							"});\r",
							"// Спарсить request\r",
							"var request = request.data\r",
							"// Проверить, что name в ответе равно name in request (name забрать из request)\r",
							"pm.test(\"Check name in response = name in request\", function () {\r",
							"    var kilo = JSON.parse(responseBody);\r",
							"    pm.expect(kilo.nikita).to.eql(request.nikita);\r",
							"});\r",
							"// Проверить, что age в ответе равно age in request (age забрать из request)\r",
							"pm.test(\"Check age in response = age in request\", function () {\r",
							"    var rep = pm.response.json();\r",
							"    pm.expect(rep.age).to.eql(request.age);\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary in request (salary забрать из request)\r",
							"pm.test(\"Check salary in response = salary in request\", function () {\r",
							"    var bul = pm.response.json();\r",
							"    pm.expect(bul.salary).to.eql(+request.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"var lolip = JSON.parse(responseBody);\r",
							"let family = lolip.family\r",
							"console.log(\"resp_family = \" , family)\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check u_salary_1_5_year in response = salary*4\", function () {\r",
							"    var lolip = JSON.parse(responseBody).family;\r",
							"    pm.expect(lolip.u_salary_1_5_year).to.eql(request.salary*4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "nikita",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "4000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var lolip = JSON.parse(responseBody);\r",
							"\r",
							"// Спарсить request\r",
							"var request = request.data\r",
							"\r",
							"// Проверить, что name в ответе равно name in request (name вбить руками.)\r",
							"pm.test(\"Check name in response = name in request\", function () {\r",
							"    var lolip = JSON.parse(responseBody);\r",
							"    pm.expect(lolip.name).to.eql(\"Nikita\");\r",
							"});\r",
							"// Проверить, что age в ответе равно age in request (age вбить руками.)\r",
							"pm.test(\"Check age in response = age in request\", function () {\r",
							"    var repop = pm.response.json();\r",
							"    pm.expect(repop.age).to.eql(\"26\");\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary in request (salary вбить руками.)\r",
							"pm.test(\"Check salary in response = salary in request\", function () {\r",
							"    var bulka = pm.response.json();\r",
							"    pm.expect(bulka.salary).to.eql(7000);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"var lolip = JSON.parse(responseBody);\r",
							"let family = lolip.family\r",
							"console.log(\"resp_family = \" , family)\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"Dog name\", function () {\r",
							"    var jsonData = pm.response.json().family.pets.dog;\r",
							"    pm.expect(jsonData.dog).to.include+(\"name\");\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Dog age\", function () {\r",
							"    var jsonData = pm.response.json().family.pets.dog;\r",
							"    pm.expect(jsonData.dog).to.include+(\"age\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"Name Luky\", function () {\r",
							"    var jsonData = pm.response.json().family.pets.dog;\r",
							"    pm.expect(jsonData.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Age = 4\", function () {\r",
							"    var jsonData = pm.response.json().family.pets.dog;\r",
							"    pm.expect(jsonData.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Nikita&age=26&salary=7000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikita"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "7000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var lolip = JSON.parse(responseBody);\r",
							"\r",
							"// Спарсить request\r",
							"//var req = request.data\r",
							"var mojo = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name in request (name вбить руками.)\r",
							"pm.test(\"Check name in response = name in request\", function () {\r",
							"    var lolip = JSON.parse(responseBody);\r",
							"    pm.expect(lolip.name).to.eql(\"Nikita\");\r",
							"});\r",
							"// Проверить, что age в ответе равно age in request (age вбить руками.)\r",
							"pm.test(\"Check age in response = age in request\", function () {\r",
							"    var repop = pm.response.json();\r",
							"    pm.expect(repop.age).to.eql(26);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request\r",
							"var mojo = pm.request.url.query.toObject();\r",
							"let my_salary = mojo.salary\r",
							"console.log ('my_salary = ' , my_salary)\r",
							"\r",
							"//Вывести в консоль параметр salary из response\r",
							"var cut = JSON.parse(responseBody);\r",
							"let salary = cut.salary\r",
							"console.log(\"resp_salary = \" , salary)\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response\r",
							"var cent = JSON.parse(responseBody);\r",
							"let sup = cent.salary[0]\r",
							"console.log(\"resp_salary_0 = \" , sup)\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"var vim = JSON.parse(responseBody);\r",
							"let xev = vim.salary[1]\r",
							"console.log(\"resp_salary_1 = \" , xev)\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"var ben = JSON.parse(responseBody);\r",
							"let nun = ben.salary[2]\r",
							"console.log(\"resp_salary_2 = \" , nun)\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary_from_response_0 = salary_from_request\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary[0]).to.eql(4000);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_from_response_1 = salary*2_from_request\", function () {\r",
							"    pm.expect(+salary[1]).to.eql(mojo.salary*2)\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_from_response_2 = salary*3_from_request\", function () {\r",
							"    pm.expect(+salary[2]).to.eql(mojo.salary*3);\r",
							"});\r",
							"\r",
							"//Создать в окружении переменную name\r",
							"pm.environment.get(\"name\", lolip.name);\r",
							"\r",
							"//Создать в окружении переменную age\r",
							"pm.environment.get(\"age\", lolip.age);\r",
							"\r",
							"//Создать в окружении переменную salary\r",
							"pm.environment.get(\"salary\", lolip.salary);\r",
							"\r",
							"// Передать в окружение переменную name\r",
							"var name = lolip.name\r",
							"pm.environment.set(\"name\", name);\r",
							"\r",
							"//Передать в окружение переменную age\r",
							"var age = lolip.age\r",
							"pm.environment.set(\"age\", age);\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", lolip.salary[0]);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (i=0; i < lolip.salary.length; i++){\r",
							"console.log(\"salary_cycle\", lolip.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Nikita&age=26&salary=4000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikita"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "4000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request\r",
							"\r",
							"//Вставить параметр age из окружения в age\r",
							"\r",
							"//Вставить параметр name из окружения в name\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"var cent = JSON.parse(responseBody);\r",
							"\r",
							"//Спарсить request\r",
							"var req = request.data\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check in response start_qa_salary\", function () {\r",
							"    pm.expect(cent).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check in response qa_salary_after_6_months\", function () {\r",
							"    pm.expect(cent).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check in response qa_salary_after_12_months\", function () {\r",
							"    pm.expect(cent).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check in response qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(cent).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check in response qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(cent).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check in response person\", function () {\r",
							"    pm.expect(cent).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"var request = request.data\r",
							"pm.test(\"Check start_qa_salary in response = salary in request\", function () {\r",
							"    pm.expect(+request.salary).to.eql(cent.start_qa_salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months in response = salary*2 in request\", function () {\r",
							"    pm.expect(request.salary*2).to.eql(cent.qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months in response = salary*2.7 in request\", function () {\r",
							"    pm.expect(request.salary*2.7).to.eql(cent.qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_1.5_year in response = salary*3.3 in request\", function () {\r",
							"    pm.expect(request.salary*3.3).to.eql(cent[\"qa_salary_after_1.5_year\"]);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_years in response = salary*3.8 in request\", function () {\r",
							"    pm.expect(request.salary*3.8).to.eql(cent[\"qa_salary_after_3.5_years\"]);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check param person 1st element u_name = salary in request\", function () {\r",
							"    pm.expect(+request.salary).to.eql(cent.person.u_name[1]);\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check u_age = age in request\", function () {\r",
							"    pm.expect(+request.age).to.eql(cent.person.u_age);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check u_salary_5_years = salary*4.2 in request\", function () {\r",
							"    pm.expect(request.salary*4.2).to.eql(cent.person.u_salary_5_years);\r",
							"});\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let key in cent.person)\r",
							"    console.log(key, cent.person[key]);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}